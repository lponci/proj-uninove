<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/aop
 		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc  
 		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	<!-- Scans the classpath for annotated components that will be auto-registered 
		as Spring beans -->

	<!-- procura por componentes para que estes possam ser manipulados pelo 
		String IoC No nosso caso, os Daos, Services e Controllers -->
	<context:component-scan
		base-package="proj.unipe.daos,proj.unipe.services,proj.unipe.controllers" />


	<!-- Permite que a injeção de dependência seja configurada usando anotações -->
	<context:annotation-config />

	<!-- Permite que os controllers do Spring MVC sejam configurados usando 
		anotações -->
	<mvc:annotation-driven />

	<!-- Permite que arquivos como imagens, css, javascript, etc não sejam bloqueados 
		pelo DispatcherServlet -->
	<mvc:default-servlet-handler />

	<!-- Injeção do resolver, que permite os controllers repassarem requisições 
		para jsps -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<mvc:interceptors>
		<bean class="proj.unipe.autorizador.AutorizadorInterceptor" />
	</mvc:interceptors>


	<!-- Injeção da classe LocalContainerEntityManagerFactoryBean que permite 
		irá gerenciar a factory do JPA -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="proj.unipe.entities"></property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
	</bean>

	<!-- Injeção do atributo 'datasource' da classe LocalContainerEntityManagerFactoryBean. 
		O datasource é responsável pela conexão com o BD -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:postgresql://localhost:18023/postgres" />
		<property name="username" value="postgres" />
		<property name="password" value="postgres" />
	</bean>

	<!-- Configura a classe responsável por efetuar o controlle transacional 
		do JPA para LocalContainerEntityManagerFactoryBean -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- habilita a configuracao das transacoes atraves da anotacao @Transactional -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- tradutor de exceptions -->
	<bean id="persistenceExceptionTranslationPostProcessor"
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

</beans>